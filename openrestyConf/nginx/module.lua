local _M = {}

local function fillVariable(request, data)
	if type(request) == "table" then 
		for key, value in pairs(request) do
			if "nil" == type(data) then
				data = key .. ":" .. value
			else
				data = data .. " | " .. key .. ":" .. value
			end
		end
	else
		if type(request) == "string" then
			if type(data) == "nil" then
				data = request
			else
				data = data .. request
			end
		else
			ngx.log(ngx.ERR, "Request type ERROR. Expected type: 'Table' or 'String'. Received type: " .. type(request))
		end
	end
	
	return data
end



function _M.logjDetection()
	
	json = require("json")
	local requestData = {}
	--vectorsExplotation = {"${jndi:", "%24%7Bjndi%3:", "${jndi:dns", "${jndi:nis", "${jndi:nds", "${jndi:rmi:", "${jndi:corba" } 
	local vectorsExplotation = {"%%24%%7Bjndi", "${${lower:j}ndi:", "${${upper:j}ndi:", "${${::-j}${::-n}${::-d}${::-i}:", "${jndi:" }
	local dataReqToCheck	
	

	if "nil" ~= type(ngx.req.get_headers()) then
		dataReqToCheck = fillVariable(ngx.req.get_headers(), dataReqToCheck)
	end

	ngx.req.read_body()
	if "nil" ~= type(ngx.req.get_body_data()) then
		if "nil" ~= type(ngx.req.get_post_args()) then
			dataReqToCheck = fillVariable(ngx.req.get_post_args(), dataReqToCheck)
		end
		dataReqToCheck = dataReqToCheck .. ngx.req.get_body_data()
	end
	
	ngx.log(ngx.ERR, "DATA TO CHECK ---> " .. dataReqToCheck .. " <-- EENDDD! ")

	if "nil" ~= type(dataReqToCheck) then
		for i, vectorExplotable in pairs(vectorsExplotation) do
			ngx.log(ngx.ERR, "CHECK --> " .. vectorExplotable .. "<-- CHEk")
			if string.find(dataReqToCheck, vectorExplotable) then
				--ngx.var.proxy ="http://172.16.238.1:8080"
				ngx.say("You can't explote this app with ", vectorExplotable)
				break
			else
				ngx.var.proxy = "http://172.16.238.1:8080"
			end
		end
	end

end


return _M
